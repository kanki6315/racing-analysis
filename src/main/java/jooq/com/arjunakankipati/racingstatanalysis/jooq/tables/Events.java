/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Indexes;
import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Series.SeriesPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Sessions.SessionsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.EventsRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Events extends TableImpl<EventsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.events</code>
     */
    public static final Events EVENTS = new Events();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventsRecord> getRecordType() {
        return EventsRecord.class;
    }

    /**
     * The column <code>public.events.id</code>.
     */
    public final TableField<EventsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.events.series_id</code>.
     */
    public final TableField<EventsRecord, Long> SERIES_ID = createField(DSL.name("series_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.events.name</code>.
     */
    public final TableField<EventsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.events.year</code>.
     */
    public final TableField<EventsRecord, Integer> YEAR = createField(DSL.name("year"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.events.start_date</code>.
     */
    public final TableField<EventsRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.events.end_date</code>.
     */
    public final TableField<EventsRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.events.description</code>.
     */
    public final TableField<EventsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private Events(Name alias, Table<EventsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Events(Name alias, Table<EventsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.events</code> table reference
     */
    public Events(String alias) {
        this(DSL.name(alias), EVENTS);
    }

    /**
     * Create an aliased <code>public.events</code> table reference
     */
    public Events(Name alias) {
        this(alias, EVENTS);
    }

    /**
     * Create a <code>public.events</code> table reference
     */
    public Events() {
        this(DSL.name("events"), null);
    }

    public <O extends Record> Events(Table<O> path, ForeignKey<O, EventsRecord> childPath, InverseForeignKey<O, EventsRecord> parentPath) {
        super(path, childPath, parentPath, EVENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EventsPath extends Events implements Path<EventsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EventsPath(Table<O> path, ForeignKey<O, EventsRecord> childPath, InverseForeignKey<O, EventsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EventsPath(Name alias, Table<EventsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EventsPath as(String alias) {
            return new EventsPath(DSL.name(alias), this);
        }

        @Override
        public EventsPath as(Name alias) {
            return new EventsPath(alias, this);
        }

        @Override
        public EventsPath as(Table<?> alias) {
            return new EventsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_EVENTS_SERIES_ID_YEAR);
    }

    @Override
    public Identity<EventsRecord, Long> getIdentity() {
        return (Identity<EventsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EventsRecord> getPrimaryKey() {
        return Keys.EVENTS_PKEY;
    }

    @Override
    public List<ForeignKey<EventsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EVENTS__EVENTS_SERIES_ID_FKEY);
    }

    private transient SeriesPath _series;

    /**
     * Get the implicit join path to the <code>public.series</code> table.
     */
    public SeriesPath series() {
        if (_series == null)
            _series = new SeriesPath(this, Keys.EVENTS__EVENTS_SERIES_ID_FKEY, null);

        return _series;
    }

    private transient SessionsPath _sessions;

    /**
     * Get the implicit to-many join path to the <code>public.sessions</code>
     * table
     */
    public SessionsPath sessions() {
        if (_sessions == null)
            _sessions = new SessionsPath(this, null, Keys.SESSIONS__SESSIONS_EVENT_ID_FKEY.getInverseKey());

        return _sessions;
    }

    @Override
    public Events as(String alias) {
        return new Events(DSL.name(alias), this);
    }

    @Override
    public Events as(Name alias) {
        return new Events(alias, this);
    }

    @Override
    public Events as(Table<?> alias) {
        return new Events(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(String name) {
        return new Events(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(Name name) {
        return new Events(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(Table<?> name) {
        return new Events(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Events where(Condition condition) {
        return new Events(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Events where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Events where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Events where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Events where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Events where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Events where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Events where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Events whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Events whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
