/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Indexes;
import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.CarDrivers.CarDriversPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.CarModels.CarModelsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Classes.ClassesPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Laps.LapsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Sessions.SessionsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Teams.TeamsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.CarEntriesRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class CarEntries extends TableImpl<CarEntriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.car_entries</code>
     */
    public static final CarEntries CAR_ENTRIES = new CarEntries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarEntriesRecord> getRecordType() {
        return CarEntriesRecord.class;
    }

    /**
     * The column <code>public.car_entries.id</code>.
     */
    public final TableField<CarEntriesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.car_entries.session_id</code>.
     */
    public final TableField<CarEntriesRecord, Long> SESSION_ID = createField(DSL.name("session_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.car_entries.team_id</code>.
     */
    public final TableField<CarEntriesRecord, Long> TEAM_ID = createField(DSL.name("team_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.car_entries.class_id</code>.
     */
    public final TableField<CarEntriesRecord, Long> CLASS_ID = createField(DSL.name("class_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.car_entries.car_model_id</code>.
     */
    public final TableField<CarEntriesRecord, Long> CAR_MODEL_ID = createField(DSL.name("car_model_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.car_entries.number</code>.
     */
    public final TableField<CarEntriesRecord, String> NUMBER = createField(DSL.name("number"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.car_entries.tire_supplier</code>.
     */
    public final TableField<CarEntriesRecord, String> TIRE_SUPPLIER = createField(DSL.name("tire_supplier"), SQLDataType.VARCHAR(50), this, "");

    private CarEntries(Name alias, Table<CarEntriesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CarEntries(Name alias, Table<CarEntriesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.car_entries</code> table reference
     */
    public CarEntries(String alias) {
        this(DSL.name(alias), CAR_ENTRIES);
    }

    /**
     * Create an aliased <code>public.car_entries</code> table reference
     */
    public CarEntries(Name alias) {
        this(alias, CAR_ENTRIES);
    }

    /**
     * Create a <code>public.car_entries</code> table reference
     */
    public CarEntries() {
        this(DSL.name("car_entries"), null);
    }

    public <O extends Record> CarEntries(Table<O> path, ForeignKey<O, CarEntriesRecord> childPath, InverseForeignKey<O, CarEntriesRecord> parentPath) {
        super(path, childPath, parentPath, CAR_ENTRIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CarEntriesPath extends CarEntries implements Path<CarEntriesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CarEntriesPath(Table<O> path, ForeignKey<O, CarEntriesRecord> childPath, InverseForeignKey<O, CarEntriesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CarEntriesPath(Name alias, Table<CarEntriesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CarEntriesPath as(String alias) {
            return new CarEntriesPath(DSL.name(alias), this);
        }

        @Override
        public CarEntriesPath as(Name alias) {
            return new CarEntriesPath(alias, this);
        }

        @Override
        public CarEntriesPath as(Table<?> alias) {
            return new CarEntriesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_CAR_ENTRIES_SESSION_CLASS, Indexes.IDX_CAR_ENTRIES_TEAM_ID);
    }

    @Override
    public Identity<CarEntriesRecord, Long> getIdentity() {
        return (Identity<CarEntriesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CarEntriesRecord> getPrimaryKey() {
        return Keys.CAR_ENTRIES_PKEY;
    }

    @Override
    public List<UniqueKey<CarEntriesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CAR_ENTRIES_SESSION_ID_NUMBER_KEY);
    }

    @Override
    public List<ForeignKey<CarEntriesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CAR_ENTRIES__CAR_ENTRIES_CAR_MODEL_ID_FKEY, Keys.CAR_ENTRIES__CAR_ENTRIES_CLASS_ID_FKEY, Keys.CAR_ENTRIES__CAR_ENTRIES_SESSION_ID_FKEY, Keys.CAR_ENTRIES__CAR_ENTRIES_TEAM_ID_FKEY);
    }

    private transient CarModelsPath _carModels;

    /**
     * Get the implicit join path to the <code>public.car_models</code> table.
     */
    public CarModelsPath carModels() {
        if (_carModels == null)
            _carModels = new CarModelsPath(this, Keys.CAR_ENTRIES__CAR_ENTRIES_CAR_MODEL_ID_FKEY, null);

        return _carModels;
    }

    private transient ClassesPath _classes;

    /**
     * Get the implicit join path to the <code>public.classes</code> table.
     */
    public ClassesPath classes() {
        if (_classes == null)
            _classes = new ClassesPath(this, Keys.CAR_ENTRIES__CAR_ENTRIES_CLASS_ID_FKEY, null);

        return _classes;
    }

    private transient SessionsPath _sessions;

    /**
     * Get the implicit join path to the <code>public.sessions</code> table.
     */
    public SessionsPath sessions() {
        if (_sessions == null)
            _sessions = new SessionsPath(this, Keys.CAR_ENTRIES__CAR_ENTRIES_SESSION_ID_FKEY, null);

        return _sessions;
    }

    private transient TeamsPath _teams;

    /**
     * Get the implicit join path to the <code>public.teams</code> table.
     */
    public TeamsPath teams() {
        if (_teams == null)
            _teams = new TeamsPath(this, Keys.CAR_ENTRIES__CAR_ENTRIES_TEAM_ID_FKEY, null);

        return _teams;
    }

    private transient CarDriversPath _carDrivers;

    /**
     * Get the implicit to-many join path to the <code>public.car_drivers</code>
     * table
     */
    public CarDriversPath carDrivers() {
        if (_carDrivers == null)
            _carDrivers = new CarDriversPath(this, null, Keys.CAR_DRIVERS__CAR_DRIVERS_CAR_ID_FKEY.getInverseKey());

        return _carDrivers;
    }

    private transient LapsPath _lapsCarEntryIdFkey;

    /**
     * Get the implicit to-many join path to the <code>public.laps</code> table,
     * via the <code>laps_car_entry_id_fkey</code> key
     */
    public LapsPath lapsCarEntryIdFkey() {
        if (_lapsCarEntryIdFkey == null)
            _lapsCarEntryIdFkey = new LapsPath(this, null, Keys.LAPS__LAPS_CAR_ENTRY_ID_FKEY.getInverseKey());

        return _lapsCarEntryIdFkey;
    }

    private transient LapsPath _lapsCarIdFkey;

    /**
     * Get the implicit to-many join path to the <code>public.laps</code> table,
     * via the <code>laps_car_id_fkey</code> key
     */
    public LapsPath lapsCarIdFkey() {
        if (_lapsCarIdFkey == null)
            _lapsCarIdFkey = new LapsPath(this, null, Keys.LAPS__LAPS_CAR_ID_FKEY.getInverseKey());

        return _lapsCarIdFkey;
    }

    @Override
    public CarEntries as(String alias) {
        return new CarEntries(DSL.name(alias), this);
    }

    @Override
    public CarEntries as(Name alias) {
        return new CarEntries(alias, this);
    }

    @Override
    public CarEntries as(Table<?> alias) {
        return new CarEntries(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CarEntries rename(String name) {
        return new CarEntries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarEntries rename(Name name) {
        return new CarEntries(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarEntries rename(Table<?> name) {
        return new CarEntries(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarEntries where(Condition condition) {
        return new CarEntries(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarEntries where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarEntries where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarEntries where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CarEntries where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CarEntries where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CarEntries where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CarEntries where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarEntries whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarEntries whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
