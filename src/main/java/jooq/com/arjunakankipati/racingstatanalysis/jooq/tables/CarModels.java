/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.CarEntries.CarEntriesPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Manufacturers.ManufacturersPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.CarModelsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class CarModels extends TableImpl<CarModelsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.car_models</code>
     */
    public static final CarModels CAR_MODELS = new CarModels();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarModelsRecord> getRecordType() {
        return CarModelsRecord.class;
    }

    /**
     * The column <code>public.car_models.id</code>.
     */
    public final TableField<CarModelsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.car_models.manufacturer_id</code>.
     */
    public final TableField<CarModelsRecord, Long> MANUFACTURER_ID = createField(DSL.name("manufacturer_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.car_models.name</code>.
     */
    public final TableField<CarModelsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.car_models.full_name</code>.
     */
    public final TableField<CarModelsRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>public.car_models.year_model</code>.
     */
    public final TableField<CarModelsRecord, Integer> YEAR_MODEL = createField(DSL.name("year_model"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.car_models.description</code>.
     */
    public final TableField<CarModelsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private CarModels(Name alias, Table<CarModelsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CarModels(Name alias, Table<CarModelsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.car_models</code> table reference
     */
    public CarModels(String alias) {
        this(DSL.name(alias), CAR_MODELS);
    }

    /**
     * Create an aliased <code>public.car_models</code> table reference
     */
    public CarModels(Name alias) {
        this(alias, CAR_MODELS);
    }

    /**
     * Create a <code>public.car_models</code> table reference
     */
    public CarModels() {
        this(DSL.name("car_models"), null);
    }

    public <O extends Record> CarModels(Table<O> path, ForeignKey<O, CarModelsRecord> childPath, InverseForeignKey<O, CarModelsRecord> parentPath) {
        super(path, childPath, parentPath, CAR_MODELS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CarModelsPath extends CarModels implements Path<CarModelsRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> CarModelsPath(Table<O> path, ForeignKey<O, CarModelsRecord> childPath, InverseForeignKey<O, CarModelsRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private CarModelsPath(Name alias, Table<CarModelsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CarModelsPath as(String alias) {
            return new CarModelsPath(DSL.name(alias), this);
        }

        @Override
        public CarModelsPath as(Name alias) {
            return new CarModelsPath(alias, this);
        }

        @Override
        public CarModelsPath as(Table<?> alias) {
            return new CarModelsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CarModelsRecord, Long> getIdentity() {
        return (Identity<CarModelsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CarModelsRecord> getPrimaryKey() {
        return Keys.CAR_MODELS_PKEY;
    }

    @Override
    public List<UniqueKey<CarModelsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CAR_MODELS_MANUFACTURER_ID_NAME_YEAR_MODEL_KEY);
    }

    @Override
    public List<ForeignKey<CarModelsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CAR_MODELS__CAR_MODELS_MANUFACTURER_ID_FKEY);
    }

    private transient ManufacturersPath _manufacturers;

    /**
     * Get the implicit join path to the <code>public.manufacturers</code>
     * table.
     */
    public ManufacturersPath manufacturers() {
        if (_manufacturers == null)
            _manufacturers = new ManufacturersPath(this, Keys.CAR_MODELS__CAR_MODELS_MANUFACTURER_ID_FKEY, null);

        return _manufacturers;
    }

    private transient CarEntriesPath _carEntries;

    /**
     * Get the implicit to-many join path to the <code>public.car_entries</code>
     * table
     */
    public CarEntriesPath carEntries() {
        if (_carEntries == null)
            _carEntries = new CarEntriesPath(this, null, Keys.CAR_ENTRIES__CAR_ENTRIES_CAR_MODEL_ID_FKEY.getInverseKey());

        return _carEntries;
    }

    @Override
    public CarModels as(String alias) {
        return new CarModels(DSL.name(alias), this);
    }

    @Override
    public CarModels as(Name alias) {
        return new CarModels(alias, this);
    }

    @Override
    public CarModels as(Table<?> alias) {
        return new CarModels(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CarModels rename(String name) {
        return new CarModels(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarModels rename(Name name) {
        return new CarModels(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarModels rename(Table<?> name) {
        return new CarModels(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarModels where(Condition condition) {
        return new CarModels(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarModels where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarModels where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarModels where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CarModels where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CarModels where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CarModels where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CarModels where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarModels whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarModels whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
