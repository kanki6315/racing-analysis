/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Sessions.SessionsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.CircuitsRecord;

import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Circuits extends TableImpl<CircuitsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.circuits</code>
     */
    public static final Circuits CIRCUITS = new Circuits();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CircuitsRecord> getRecordType() {
        return CircuitsRecord.class;
    }

    /**
     * The column <code>public.circuits.id</code>.
     */
    public final TableField<CircuitsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.circuits.name</code>.
     */
    public final TableField<CircuitsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.circuits.length_meters</code>.
     */
    public final TableField<CircuitsRecord, BigDecimal> LENGTH_METERS = createField(DSL.name("length_meters"), SQLDataType.NUMERIC(10, 3).nullable(false), this, "");

    /**
     * The column <code>public.circuits.country</code>.
     */
    public final TableField<CircuitsRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.circuits.location</code>.
     */
    public final TableField<CircuitsRecord, String> LOCATION = createField(DSL.name("location"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.circuits.description</code>.
     */
    public final TableField<CircuitsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private Circuits(Name alias, Table<CircuitsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Circuits(Name alias, Table<CircuitsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.circuits</code> table reference
     */
    public Circuits(String alias) {
        this(DSL.name(alias), CIRCUITS);
    }

    /**
     * Create an aliased <code>public.circuits</code> table reference
     */
    public Circuits(Name alias) {
        this(alias, CIRCUITS);
    }

    /**
     * Create a <code>public.circuits</code> table reference
     */
    public Circuits() {
        this(DSL.name("circuits"), null);
    }

    public <O extends Record> Circuits(Table<O> path, ForeignKey<O, CircuitsRecord> childPath, InverseForeignKey<O, CircuitsRecord> parentPath) {
        super(path, childPath, parentPath, CIRCUITS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CircuitsPath extends Circuits implements Path<CircuitsRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> CircuitsPath(Table<O> path, ForeignKey<O, CircuitsRecord> childPath, InverseForeignKey<O, CircuitsRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private CircuitsPath(Name alias, Table<CircuitsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CircuitsPath as(String alias) {
            return new CircuitsPath(DSL.name(alias), this);
        }

        @Override
        public CircuitsPath as(Name alias) {
            return new CircuitsPath(alias, this);
        }

        @Override
        public CircuitsPath as(Table<?> alias) {
            return new CircuitsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CircuitsRecord, Long> getIdentity() {
        return (Identity<CircuitsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CircuitsRecord> getPrimaryKey() {
        return Keys.CIRCUITS_PKEY;
    }

    private transient SessionsPath _sessions;

    /**
     * Get the implicit to-many join path to the <code>public.sessions</code>
     * table
     */
    public SessionsPath sessions() {
        if (_sessions == null)
            _sessions = new SessionsPath(this, null, Keys.SESSIONS__SESSIONS_CIRCUIT_ID_FKEY.getInverseKey());

        return _sessions;
    }

    @Override
    public Circuits as(String alias) {
        return new Circuits(DSL.name(alias), this);
    }

    @Override
    public Circuits as(Name alias) {
        return new Circuits(alias, this);
    }

    @Override
    public Circuits as(Table<?> alias) {
        return new Circuits(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Circuits rename(String name) {
        return new Circuits(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Circuits rename(Name name) {
        return new Circuits(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Circuits rename(Table<?> name) {
        return new Circuits(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Circuits where(Condition condition) {
        return new Circuits(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Circuits where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Circuits where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Circuits where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Circuits where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Circuits where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Circuits where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Circuits where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Circuits whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Circuits whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
