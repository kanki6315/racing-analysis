/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Laps.LapsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.SectorsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Sectors extends TableImpl<SectorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sectors</code>
     */
    public static final Sectors SECTORS = new Sectors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SectorsRecord> getRecordType() {
        return SectorsRecord.class;
    }

    /**
     * The column <code>public.sectors.id</code>.
     */
    public final TableField<SectorsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sectors.lap_id</code>.
     */
    public final TableField<SectorsRecord, Long> LAP_ID = createField(DSL.name("lap_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.sectors.sector_number</code>.
     */
    public final TableField<SectorsRecord, Integer> SECTOR_NUMBER = createField(DSL.name("sector_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.sectors.sector_time_seconds</code>.
     */
    public final TableField<SectorsRecord, BigDecimal> SECTOR_TIME_SECONDS = createField(DSL.name("sector_time_seconds"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.sectors.is_personal_best</code>.
     */
    public final TableField<SectorsRecord, Boolean> IS_PERSONAL_BEST = createField(DSL.name("is_personal_best"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.sectors.is_session_best</code>.
     */
    public final TableField<SectorsRecord, Boolean> IS_SESSION_BEST = createField(DSL.name("is_session_best"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.sectors.is_valid</code>.
     */
    public final TableField<SectorsRecord, Boolean> IS_VALID = createField(DSL.name("is_valid"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.sectors.invalidation_reason</code>.
     */
    public final TableField<SectorsRecord, String> INVALIDATION_REASON = createField(DSL.name("invalidation_reason"), SQLDataType.VARCHAR(100), this, "");

    private Sectors(Name alias, Table<SectorsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Sectors(Name alias, Table<SectorsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.sectors</code> table reference
     */
    public Sectors(String alias) {
        this(DSL.name(alias), SECTORS);
    }

    /**
     * Create an aliased <code>public.sectors</code> table reference
     */
    public Sectors(Name alias) {
        this(alias, SECTORS);
    }

    /**
     * Create a <code>public.sectors</code> table reference
     */
    public Sectors() {
        this(DSL.name("sectors"), null);
    }

    public <O extends Record> Sectors(Table<O> path, ForeignKey<O, SectorsRecord> childPath, InverseForeignKey<O, SectorsRecord> parentPath) {
        super(path, childPath, parentPath, SECTORS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SectorsPath extends Sectors implements Path<SectorsRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> SectorsPath(Table<O> path, ForeignKey<O, SectorsRecord> childPath, InverseForeignKey<O, SectorsRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private SectorsPath(Name alias, Table<SectorsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SectorsPath as(String alias) {
            return new SectorsPath(DSL.name(alias), this);
        }

        @Override
        public SectorsPath as(Name alias) {
            return new SectorsPath(alias, this);
        }

        @Override
        public SectorsPath as(Table<?> alias) {
            return new SectorsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SectorsRecord, Long> getIdentity() {
        return (Identity<SectorsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SectorsRecord> getPrimaryKey() {
        return Keys.SECTORS_PKEY;
    }

    @Override
    public List<ForeignKey<SectorsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SECTORS__SECTORS_LAP_ID_FKEY);
    }

    private transient LapsPath _laps;

    /**
     * Get the implicit join path to the <code>public.laps</code> table.
     */
    public LapsPath laps() {
        if (_laps == null)
            _laps = new LapsPath(this, Keys.SECTORS__SECTORS_LAP_ID_FKEY, null);

        return _laps;
    }

    @Override
    public List<Check<SectorsRecord>> getChecks() {
        return Arrays.asList(
                Internal.createCheck(this, DSL.name("reasonable_sector_time"), "(((sector_time_seconds IS NULL) OR ((sector_time_seconds > (0)::numeric) AND (sector_time_seconds < (3600)::numeric))))", true)
        );
    }

    @Override
    public Sectors as(String alias) {
        return new Sectors(DSL.name(alias), this);
    }

    @Override
    public Sectors as(Name alias) {
        return new Sectors(alias, this);
    }

    @Override
    public Sectors as(Table<?> alias) {
        return new Sectors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sectors rename(String name) {
        return new Sectors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sectors rename(Name name) {
        return new Sectors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sectors rename(Table<?> name) {
        return new Sectors(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sectors where(Condition condition) {
        return new Sectors(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sectors where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sectors where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sectors where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sectors where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sectors where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sectors where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sectors where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sectors whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sectors whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
