/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables.records;


import com.arjunakankipati.racingstatanalysis.jooq.tables.Sectors;

import java.math.BigDecimal;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class SectorsRecord extends UpdatableRecordImpl<SectorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.sectors.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.sectors.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.sectors.lap_id</code>.
     */
    public void setLapId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.sectors.lap_id</code>.
     */
    public Long getLapId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.sectors.sector_number</code>.
     */
    public void setSectorNumber(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.sectors.sector_number</code>.
     */
    public Integer getSectorNumber() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.sectors.sector_time_seconds</code>.
     */
    public void setSectorTimeSeconds(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.sectors.sector_time_seconds</code>.
     */
    public BigDecimal getSectorTimeSeconds() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>public.sectors.is_personal_best</code>.
     */
    public void setIsPersonalBest(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.sectors.is_personal_best</code>.
     */
    public Boolean getIsPersonalBest() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>public.sectors.is_session_best</code>.
     */
    public void setIsSessionBest(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.sectors.is_session_best</code>.
     */
    public Boolean getIsSessionBest() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>public.sectors.is_valid</code>.
     */
    public void setIsValid(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.sectors.is_valid</code>.
     */
    public Boolean getIsValid() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>public.sectors.invalidation_reason</code>.
     */
    public void setInvalidationReason(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.sectors.invalidation_reason</code>.
     */
    public String getInvalidationReason() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SectorsRecord
     */
    public SectorsRecord() {
        super(Sectors.SECTORS);
    }

    /**
     * Create a detached, initialised SectorsRecord
     */
    public SectorsRecord(Long id, Long lapId, Integer sectorNumber, BigDecimal sectorTimeSeconds, Boolean isPersonalBest, Boolean isSessionBest, Boolean isValid, String invalidationReason) {
        super(Sectors.SECTORS);

        setId(id);
        setLapId(lapId);
        setSectorNumber(sectorNumber);
        setSectorTimeSeconds(sectorTimeSeconds);
        setIsPersonalBest(isPersonalBest);
        setIsSessionBest(isSessionBest);
        setIsValid(isValid);
        setInvalidationReason(invalidationReason);
        resetChangedOnNotNull();
    }
}
