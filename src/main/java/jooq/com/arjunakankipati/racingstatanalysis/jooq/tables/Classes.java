/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Cars.CarsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Series.SeriesPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.ClassesRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Classes extends TableImpl<ClassesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.classes</code>
     */
    public static final Classes CLASSES = new Classes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClassesRecord> getRecordType() {
        return ClassesRecord.class;
    }

    /**
     * The column <code>public.classes.id</code>.
     */
    public final TableField<ClassesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.classes.series_id</code>.
     */
    public final TableField<ClassesRecord, Long> SERIES_ID = createField(DSL.name("series_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.classes.name</code>.
     */
    public final TableField<ClassesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.classes.description</code>.
     */
    public final TableField<ClassesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private Classes(Name alias, Table<ClassesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Classes(Name alias, Table<ClassesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.classes</code> table reference
     */
    public Classes(String alias) {
        this(DSL.name(alias), CLASSES);
    }

    /**
     * Create an aliased <code>public.classes</code> table reference
     */
    public Classes(Name alias) {
        this(alias, CLASSES);
    }

    /**
     * Create a <code>public.classes</code> table reference
     */
    public Classes() {
        this(DSL.name("classes"), null);
    }

    public <O extends Record> Classes(Table<O> path, ForeignKey<O, ClassesRecord> childPath, InverseForeignKey<O, ClassesRecord> parentPath) {
        super(path, childPath, parentPath, CLASSES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ClassesPath extends Classes implements Path<ClassesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ClassesPath(Table<O> path, ForeignKey<O, ClassesRecord> childPath, InverseForeignKey<O, ClassesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ClassesPath(Name alias, Table<ClassesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ClassesPath as(String alias) {
            return new ClassesPath(DSL.name(alias), this);
        }

        @Override
        public ClassesPath as(Name alias) {
            return new ClassesPath(alias, this);
        }

        @Override
        public ClassesPath as(Table<?> alias) {
            return new ClassesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ClassesRecord, Long> getIdentity() {
        return (Identity<ClassesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ClassesRecord> getPrimaryKey() {
        return Keys.CLASSES_PKEY;
    }

    @Override
    public List<ForeignKey<ClassesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CLASSES__CLASSES_SERIES_ID_FKEY);
    }

    private transient SeriesPath _series;

    /**
     * Get the implicit join path to the <code>public.series</code> table.
     */
    public SeriesPath series() {
        if (_series == null)
            _series = new SeriesPath(this, Keys.CLASSES__CLASSES_SERIES_ID_FKEY, null);

        return _series;
    }

    private transient CarsPath _cars;

    /**
     * Get the implicit to-many join path to the <code>public.cars</code> table
     */
    public CarsPath cars() {
        if (_cars == null)
            _cars = new CarsPath(this, null, Keys.CARS__CARS_CLASS_ID_FKEY.getInverseKey());

        return _cars;
    }

    @Override
    public Classes as(String alias) {
        return new Classes(DSL.name(alias), this);
    }

    @Override
    public Classes as(Name alias) {
        return new Classes(alias, this);
    }

    @Override
    public Classes as(Table<?> alias) {
        return new Classes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Classes rename(String name) {
        return new Classes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Classes rename(Name name) {
        return new Classes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Classes rename(Table<?> name) {
        return new Classes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Classes where(Condition condition) {
        return new Classes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Classes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Classes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Classes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Classes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Classes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Classes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Classes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Classes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Classes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
