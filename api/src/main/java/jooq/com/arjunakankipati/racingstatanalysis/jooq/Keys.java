/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq;


import com.arjunakankipati.racingstatanalysis.jooq.tables.*;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.*;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CarDriversRecord> CAR_DRIVERS_PKEY = Internal.createUniqueKey(CarDrivers.CAR_DRIVERS, DSL.name("car_drivers_pkey"), new TableField[] { CarDrivers.CAR_DRIVERS.ID }, true);
    public static final UniqueKey<CarEntriesRecord> CAR_ENTRIES_PKEY = Internal.createUniqueKey(CarEntries.CAR_ENTRIES, DSL.name("car_entries_pkey"), new TableField[] { CarEntries.CAR_ENTRIES.ID }, true);
    public static final UniqueKey<CarEntriesRecord> CAR_ENTRIES_SESSION_ID_NUMBER_KEY = Internal.createUniqueKey(CarEntries.CAR_ENTRIES, DSL.name("car_entries_session_id_number_key"), new TableField[] { CarEntries.CAR_ENTRIES.SESSION_ID, CarEntries.CAR_ENTRIES.NUMBER }, true);
    public static final UniqueKey<CarModelsRecord> CAR_MODELS_PKEY = Internal.createUniqueKey(CarModels.CAR_MODELS, DSL.name("car_models_pkey"), new TableField[] { CarModels.CAR_MODELS.ID }, true);
    public static final UniqueKey<CircuitsRecord> CIRCUITS_PKEY = Internal.createUniqueKey(Circuits.CIRCUITS, DSL.name("circuits_pkey"), new TableField[] { Circuits.CIRCUITS.ID }, true);
    public static final UniqueKey<ClassesRecord> CLASSES_PKEY = Internal.createUniqueKey(Classes.CLASSES, DSL.name("classes_pkey"), new TableField[] { Classes.CLASSES.ID }, true);
    public static final UniqueKey<DriversRecord> DRIVERS_PKEY = Internal.createUniqueKey(Drivers.DRIVERS, DSL.name("drivers_pkey"), new TableField[] { Drivers.DRIVERS.ID }, true);
    public static final UniqueKey<EventsRecord> EVENTS_PKEY = Internal.createUniqueKey(Events.EVENTS, DSL.name("events_pkey"), new TableField[] { Events.EVENTS.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<ImportJobsRecord> IMPORT_JOBS_PKEY = Internal.createUniqueKey(ImportJobs.IMPORT_JOBS, DSL.name("import_jobs_pkey"), new TableField[] { ImportJobs.IMPORT_JOBS.ID }, true);
    public static final UniqueKey<LapsRecord> LAPS_PKEY = Internal.createUniqueKey(Laps.LAPS, DSL.name("laps_pkey"), new TableField[] { Laps.LAPS.ID }, true);
    public static final UniqueKey<ResultsRecord> RESULTS_PKEY = Internal.createUniqueKey(Results.RESULTS, DSL.name("results_pkey"), new TableField[]{Results.RESULTS.ID}, true);
    public static final UniqueKey<SectorsRecord> SECTORS_PKEY = Internal.createUniqueKey(Sectors.SECTORS, DSL.name("sectors_pkey"), new TableField[] { Sectors.SECTORS.ID }, true);
    public static final UniqueKey<SeriesRecord> SERIES_PKEY = Internal.createUniqueKey(Series.SERIES, DSL.name("series_pkey"), new TableField[] { Series.SERIES.ID }, true);
    public static final UniqueKey<SessionsRecord> SESSIONS_PKEY = Internal.createUniqueKey(Sessions.SESSIONS, DSL.name("sessions_pkey"), new TableField[] { Sessions.SESSIONS.ID }, true);
    public static final UniqueKey<TeamsRecord> TEAMS_PKEY = Internal.createUniqueKey(Teams.TEAMS, DSL.name("teams_pkey"), new TableField[] { Teams.TEAMS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CarDriversRecord, CarEntriesRecord> CAR_DRIVERS__CAR_DRIVERS_CAR_ID_FKEY = Internal.createForeignKey(CarDrivers.CAR_DRIVERS, DSL.name("car_drivers_car_id_fkey"), new TableField[] { CarDrivers.CAR_DRIVERS.CAR_ID }, Keys.CAR_ENTRIES_PKEY, new TableField[] { CarEntries.CAR_ENTRIES.ID }, true);
    public static final ForeignKey<CarDriversRecord, DriversRecord> CAR_DRIVERS__CAR_DRIVERS_DRIVER_ID_FKEY = Internal.createForeignKey(CarDrivers.CAR_DRIVERS, DSL.name("car_drivers_driver_id_fkey"), new TableField[] { CarDrivers.CAR_DRIVERS.DRIVER_ID }, Keys.DRIVERS_PKEY, new TableField[] { Drivers.DRIVERS.ID }, true);
    public static final ForeignKey<CarEntriesRecord, CarModelsRecord> CAR_ENTRIES__CAR_ENTRIES_CAR_MODEL_ID_FKEY = Internal.createForeignKey(CarEntries.CAR_ENTRIES, DSL.name("car_entries_car_model_id_fkey"), new TableField[] { CarEntries.CAR_ENTRIES.CAR_MODEL_ID }, Keys.CAR_MODELS_PKEY, new TableField[] { CarModels.CAR_MODELS.ID }, true);
    public static final ForeignKey<CarEntriesRecord, ClassesRecord> CAR_ENTRIES__CAR_ENTRIES_CLASS_ID_FKEY = Internal.createForeignKey(CarEntries.CAR_ENTRIES, DSL.name("car_entries_class_id_fkey"), new TableField[] { CarEntries.CAR_ENTRIES.CLASS_ID }, Keys.CLASSES_PKEY, new TableField[] { Classes.CLASSES.ID }, true);
    public static final ForeignKey<CarEntriesRecord, SessionsRecord> CAR_ENTRIES__CAR_ENTRIES_SESSION_ID_FKEY = Internal.createForeignKey(CarEntries.CAR_ENTRIES, DSL.name("car_entries_session_id_fkey"), new TableField[] { CarEntries.CAR_ENTRIES.SESSION_ID }, Keys.SESSIONS_PKEY, new TableField[] { Sessions.SESSIONS.ID }, true);
    public static final ForeignKey<CarEntriesRecord, TeamsRecord> CAR_ENTRIES__CAR_ENTRIES_TEAM_ID_FKEY = Internal.createForeignKey(CarEntries.CAR_ENTRIES, DSL.name("car_entries_team_id_fkey"), new TableField[] { CarEntries.CAR_ENTRIES.TEAM_ID }, Keys.TEAMS_PKEY, new TableField[] { Teams.TEAMS.ID }, true);
    public static final ForeignKey<ClassesRecord, SeriesRecord> CLASSES__CLASSES_SERIES_ID_FKEY = Internal.createForeignKey(Classes.CLASSES, DSL.name("classes_series_id_fkey"), new TableField[] { Classes.CLASSES.SERIES_ID }, Keys.SERIES_PKEY, new TableField[] { Series.SERIES.ID }, true);
    public static final ForeignKey<EventsRecord, SeriesRecord> EVENTS__EVENTS_SERIES_ID_FKEY = Internal.createForeignKey(Events.EVENTS, DSL.name("events_series_id_fkey"), new TableField[] { Events.EVENTS.SERIES_ID }, Keys.SERIES_PKEY, new TableField[] { Series.SERIES.ID }, true);
    public static final ForeignKey<EventsRecord, CircuitsRecord> EVENTS__FK_EVENTS_CIRCUIT = Internal.createForeignKey(Events.EVENTS, DSL.name("fk_events_circuit"), new TableField[]{Events.EVENTS.CIRCUIT_ID}, Keys.CIRCUITS_PKEY, new TableField[]{Circuits.CIRCUITS.ID}, true);
    public static final ForeignKey<ImportJobsRecord, SessionsRecord> IMPORT_JOBS__IMPORT_JOBS_SESSION_ID_FKEY = Internal.createForeignKey(ImportJobs.IMPORT_JOBS, DSL.name("import_jobs_session_id_fkey"), new TableField[]{ImportJobs.IMPORT_JOBS.SESSION_ID}, Keys.SESSIONS_PKEY, new TableField[]{Sessions.SESSIONS.ID}, true);
    public static final ForeignKey<LapsRecord, CarEntriesRecord> LAPS__LAPS_CAR_ENTRY_ID_FKEY = Internal.createForeignKey(Laps.LAPS, DSL.name("laps_car_entry_id_fkey"), new TableField[] { Laps.LAPS.CAR_ID }, Keys.CAR_ENTRIES_PKEY, new TableField[] { CarEntries.CAR_ENTRIES.ID }, true);
    public static final ForeignKey<LapsRecord, CarEntriesRecord> LAPS__LAPS_CAR_ID_FKEY = Internal.createForeignKey(Laps.LAPS, DSL.name("laps_car_id_fkey"), new TableField[] { Laps.LAPS.CAR_ID }, Keys.CAR_ENTRIES_PKEY, new TableField[] { CarEntries.CAR_ENTRIES.ID }, true);
    public static final ForeignKey<LapsRecord, DriversRecord> LAPS__LAPS_DRIVER_ID_FKEY = Internal.createForeignKey(Laps.LAPS, DSL.name("laps_driver_id_fkey"), new TableField[] { Laps.LAPS.DRIVER_ID }, Keys.DRIVERS_PKEY, new TableField[] { Drivers.DRIVERS.ID }, true);
    public static final ForeignKey<ResultsRecord, CarEntriesRecord> RESULTS__RESULTS_CAR_ENTRY_ID_FKEY = Internal.createForeignKey(Results.RESULTS, DSL.name("results_car_entry_id_fkey"), new TableField[]{Results.RESULTS.CAR_ENTRY_ID}, Keys.CAR_ENTRIES_PKEY, new TableField[]{CarEntries.CAR_ENTRIES.ID}, true);
    public static final ForeignKey<ResultsRecord, SessionsRecord> RESULTS__RESULTS_SESSION_ID_FKEY = Internal.createForeignKey(Results.RESULTS, DSL.name("results_session_id_fkey"), new TableField[]{Results.RESULTS.SESSION_ID}, Keys.SESSIONS_PKEY, new TableField[]{Sessions.SESSIONS.ID}, true);
    public static final ForeignKey<SectorsRecord, LapsRecord> SECTORS__SECTORS_LAP_ID_FKEY = Internal.createForeignKey(Sectors.SECTORS, DSL.name("sectors_lap_id_fkey"), new TableField[] { Sectors.SECTORS.LAP_ID }, Keys.LAPS_PKEY, new TableField[] { Laps.LAPS.ID }, true);
    public static final ForeignKey<SessionsRecord, EventsRecord> SESSIONS__SESSIONS_EVENT_ID_FKEY = Internal.createForeignKey(Sessions.SESSIONS, DSL.name("sessions_event_id_fkey"), new TableField[] { Sessions.SESSIONS.EVENT_ID }, Keys.EVENTS_PKEY, new TableField[] { Events.EVENTS.ID }, true);
}
