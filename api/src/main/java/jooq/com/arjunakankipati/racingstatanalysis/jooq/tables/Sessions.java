/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Indexes;
import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.CarEntries.CarEntriesPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Events.EventsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.ImportJobs.ImportJobsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Results.ResultsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.SessionsRecord;
import org.jooq.*;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Sessions extends TableImpl<SessionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sessions</code>
     */
    public static final Sessions SESSIONS = new Sessions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionsRecord> getRecordType() {
        return SessionsRecord.class;
    }

    /**
     * The column <code>public.sessions.id</code>.
     */
    public final TableField<SessionsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sessions.event_id</code>.
     */
    public final TableField<SessionsRecord, Long> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.sessions.name</code>.
     */
    public final TableField<SessionsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.sessions.type</code>.
     */
    public final TableField<SessionsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.sessions.start_datetime</code>.
     */
    public final TableField<SessionsRecord, LocalDateTime> START_DATETIME = createField(DSL.name("start_datetime"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.sessions.duration_seconds</code>.
     */
    public final TableField<SessionsRecord, Integer> DURATION_SECONDS = createField(DSL.name("duration_seconds"), SQLDataType.INTEGER.nullable(false), this, "");

    private Sessions(Name alias, Table<SessionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Sessions(Name alias, Table<SessionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.sessions</code> table reference
     */
    public Sessions(String alias) {
        this(DSL.name(alias), SESSIONS);
    }

    /**
     * Create an aliased <code>public.sessions</code> table reference
     */
    public Sessions(Name alias) {
        this(alias, SESSIONS);
    }

    /**
     * Create a <code>public.sessions</code> table reference
     */
    public Sessions() {
        this(DSL.name("sessions"), null);
    }

    public <O extends Record> Sessions(Table<O> path, ForeignKey<O, SessionsRecord> childPath, InverseForeignKey<O, SessionsRecord> parentPath) {
        super(path, childPath, parentPath, SESSIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SessionsPath extends Sessions implements Path<SessionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SessionsPath(Table<O> path, ForeignKey<O, SessionsRecord> childPath, InverseForeignKey<O, SessionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SessionsPath(Name alias, Table<SessionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SessionsPath as(String alias) {
            return new SessionsPath(DSL.name(alias), this);
        }

        @Override
        public SessionsPath as(Name alias) {
            return new SessionsPath(alias, this);
        }

        @Override
        public SessionsPath as(Table<?> alias) {
            return new SessionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SESSIONS_EVENT_ID);
    }

    @Override
    public Identity<SessionsRecord, Long> getIdentity() {
        return (Identity<SessionsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SessionsRecord> getPrimaryKey() {
        return Keys.SESSIONS_PKEY;
    }

    @Override
    public List<ForeignKey<SessionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SESSIONS__SESSIONS_EVENT_ID_FKEY);
    }

    private transient EventsPath _events;

    /**
     * Get the implicit join path to the <code>public.events</code> table.
     */
    public EventsPath events() {
        if (_events == null)
            _events = new EventsPath(this, Keys.SESSIONS__SESSIONS_EVENT_ID_FKEY, null);

        return _events;
    }

    private transient CarEntriesPath _carEntries;

    /**
     * Get the implicit to-many join path to the <code>public.car_entries</code>
     * table
     */
    public CarEntriesPath carEntries() {
        if (_carEntries == null)
            _carEntries = new CarEntriesPath(this, null, Keys.CAR_ENTRIES__CAR_ENTRIES_SESSION_ID_FKEY.getInverseKey());

        return _carEntries;
    }

    private transient ImportJobsPath _importJobs;

    /**
     * Get the implicit to-many join path to the <code>public.import_jobs</code>
     * table
     */
    public ImportJobsPath importJobs() {
        if (_importJobs == null)
            _importJobs = new ImportJobsPath(this, null, Keys.IMPORT_JOBS__IMPORT_JOBS_SESSION_ID_FKEY.getInverseKey());

        return _importJobs;
    }

    private transient ResultsPath _results;

    /**
     * Get the implicit to-many join path to the <code>public.results</code>
     * table
     */
    public ResultsPath results() {
        if (_results == null)
            _results = new ResultsPath(this, null, Keys.RESULTS__RESULTS_SESSION_ID_FKEY.getInverseKey());

        return _results;
    }

    @Override
    public Sessions as(String alias) {
        return new Sessions(DSL.name(alias), this);
    }

    @Override
    public Sessions as(Name alias) {
        return new Sessions(alias, this);
    }

    @Override
    public Sessions as(Table<?> alias) {
        return new Sessions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(String name) {
        return new Sessions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(Name name) {
        return new Sessions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(Table<?> name) {
        return new Sessions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions where(Condition condition) {
        return new Sessions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sessions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sessions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sessions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sessions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
