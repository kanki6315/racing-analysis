/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Indexes;
import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.CarEntries.CarEntriesPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Drivers.DriversPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.CarDriversRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CarDrivers extends TableImpl<CarDriversRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.car_drivers</code>
     */
    public static final CarDrivers CAR_DRIVERS = new CarDrivers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarDriversRecord> getRecordType() {
        return CarDriversRecord.class;
    }

    /**
     * The column <code>public.car_drivers.id</code>.
     */
    public final TableField<CarDriversRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.car_drivers.driver_id</code>.
     */
    public final TableField<CarDriversRecord, Long> DRIVER_ID = createField(DSL.name("driver_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.car_drivers.driver_number</code>.
     */
    public final TableField<CarDriversRecord, Integer> DRIVER_NUMBER = createField(DSL.name("driver_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.car_drivers.car_id</code>.
     */
    public final TableField<CarDriversRecord, Long> CAR_ID = createField(DSL.name("car_id"), SQLDataType.BIGINT, this, "");

    private CarDrivers(Name alias, Table<CarDriversRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CarDrivers(Name alias, Table<CarDriversRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.car_drivers</code> table reference
     */
    public CarDrivers(String alias) {
        this(DSL.name(alias), CAR_DRIVERS);
    }

    /**
     * Create an aliased <code>public.car_drivers</code> table reference
     */
    public CarDrivers(Name alias) {
        this(alias, CAR_DRIVERS);
    }

    /**
     * Create a <code>public.car_drivers</code> table reference
     */
    public CarDrivers() {
        this(DSL.name("car_drivers"), null);
    }

    public <O extends Record> CarDrivers(Table<O> path, ForeignKey<O, CarDriversRecord> childPath, InverseForeignKey<O, CarDriversRecord> parentPath) {
        super(path, childPath, parentPath, CAR_DRIVERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CarDriversPath extends CarDrivers implements Path<CarDriversRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CarDriversPath(Table<O> path, ForeignKey<O, CarDriversRecord> childPath, InverseForeignKey<O, CarDriversRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CarDriversPath(Name alias, Table<CarDriversRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CarDriversPath as(String alias) {
            return new CarDriversPath(DSL.name(alias), this);
        }

        @Override
        public CarDriversPath as(Name alias) {
            return new CarDriversPath(alias, this);
        }

        @Override
        public CarDriversPath as(Table<?> alias) {
            return new CarDriversPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_CAR_DRIVERS_CAR_ID);
    }

    @Override
    public Identity<CarDriversRecord, Long> getIdentity() {
        return (Identity<CarDriversRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CarDriversRecord> getPrimaryKey() {
        return Keys.CAR_DRIVERS_PKEY;
    }

    @Override
    public List<ForeignKey<CarDriversRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CAR_DRIVERS__CAR_DRIVERS_CAR_ID_FKEY, Keys.CAR_DRIVERS__CAR_DRIVERS_DRIVER_ID_FKEY);
    }

    private transient CarEntriesPath _carEntries;

    /**
     * Get the implicit join path to the <code>public.car_entries</code> table.
     */
    public CarEntriesPath carEntries() {
        if (_carEntries == null)
            _carEntries = new CarEntriesPath(this, Keys.CAR_DRIVERS__CAR_DRIVERS_CAR_ID_FKEY, null);

        return _carEntries;
    }

    private transient DriversPath _drivers;

    /**
     * Get the implicit join path to the <code>public.drivers</code> table.
     */
    public DriversPath drivers() {
        if (_drivers == null)
            _drivers = new DriversPath(this, Keys.CAR_DRIVERS__CAR_DRIVERS_DRIVER_ID_FKEY, null);

        return _drivers;
    }

    @Override
    public CarDrivers as(String alias) {
        return new CarDrivers(DSL.name(alias), this);
    }

    @Override
    public CarDrivers as(Name alias) {
        return new CarDrivers(alias, this);
    }

    @Override
    public CarDrivers as(Table<?> alias) {
        return new CarDrivers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CarDrivers rename(String name) {
        return new CarDrivers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarDrivers rename(Name name) {
        return new CarDrivers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CarDrivers rename(Table<?> name) {
        return new CarDrivers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarDrivers where(Condition condition) {
        return new CarDrivers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarDrivers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarDrivers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarDrivers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CarDrivers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CarDrivers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CarDrivers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CarDrivers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarDrivers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CarDrivers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
