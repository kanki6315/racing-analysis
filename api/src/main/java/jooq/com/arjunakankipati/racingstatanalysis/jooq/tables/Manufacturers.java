/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.CarModels.CarModelsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.ManufacturersRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Manufacturers extends TableImpl<ManufacturersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.manufacturers</code>
     */
    public static final Manufacturers MANUFACTURERS = new Manufacturers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManufacturersRecord> getRecordType() {
        return ManufacturersRecord.class;
    }

    /**
     * The column <code>public.manufacturers.id</code>.
     */
    public final TableField<ManufacturersRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.manufacturers.name</code>.
     */
    public final TableField<ManufacturersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.manufacturers.country</code>.
     */
    public final TableField<ManufacturersRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(100), this, "");

    private Manufacturers(Name alias, Table<ManufacturersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Manufacturers(Name alias, Table<ManufacturersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.manufacturers</code> table reference
     */
    public Manufacturers(String alias) {
        this(DSL.name(alias), MANUFACTURERS);
    }

    /**
     * Create an aliased <code>public.manufacturers</code> table reference
     */
    public Manufacturers(Name alias) {
        this(alias, MANUFACTURERS);
    }

    /**
     * Create a <code>public.manufacturers</code> table reference
     */
    public Manufacturers() {
        this(DSL.name("manufacturers"), null);
    }

    public <O extends Record> Manufacturers(Table<O> path, ForeignKey<O, ManufacturersRecord> childPath, InverseForeignKey<O, ManufacturersRecord> parentPath) {
        super(path, childPath, parentPath, MANUFACTURERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ManufacturersPath extends Manufacturers implements Path<ManufacturersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ManufacturersPath(Table<O> path, ForeignKey<O, ManufacturersRecord> childPath, InverseForeignKey<O, ManufacturersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ManufacturersPath(Name alias, Table<ManufacturersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ManufacturersPath as(String alias) {
            return new ManufacturersPath(DSL.name(alias), this);
        }

        @Override
        public ManufacturersPath as(Name alias) {
            return new ManufacturersPath(alias, this);
        }

        @Override
        public ManufacturersPath as(Table<?> alias) {
            return new ManufacturersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ManufacturersRecord, Long> getIdentity() {
        return (Identity<ManufacturersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ManufacturersRecord> getPrimaryKey() {
        return Keys.MANUFACTURERS_PKEY;
    }

    private transient CarModelsPath _carModels;

    /**
     * Get the implicit to-many join path to the <code>public.car_models</code>
     * table
     */
    public CarModelsPath carModels() {
        if (_carModels == null)
            _carModels = new CarModelsPath(this, null, Keys.CAR_MODELS__CAR_MODELS_MANUFACTURER_ID_FKEY.getInverseKey());

        return _carModels;
    }

    @Override
    public Manufacturers as(String alias) {
        return new Manufacturers(DSL.name(alias), this);
    }

    @Override
    public Manufacturers as(Name alias) {
        return new Manufacturers(alias, this);
    }

    @Override
    public Manufacturers as(Table<?> alias) {
        return new Manufacturers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Manufacturers rename(String name) {
        return new Manufacturers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Manufacturers rename(Name name) {
        return new Manufacturers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Manufacturers rename(Table<?> name) {
        return new Manufacturers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manufacturers where(Condition condition) {
        return new Manufacturers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manufacturers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manufacturers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manufacturers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Manufacturers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Manufacturers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Manufacturers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Manufacturers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manufacturers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Manufacturers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
