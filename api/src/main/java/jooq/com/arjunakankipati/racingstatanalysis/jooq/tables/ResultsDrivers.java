/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Drivers.DriversPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Results.ResultsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.ResultsDriversRecord;
import org.jooq.*;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ResultsDrivers extends TableImpl<ResultsDriversRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.results_drivers</code>
     */
    public static final ResultsDrivers RESULTS_DRIVERS = new ResultsDrivers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResultsDriversRecord> getRecordType() {
        return ResultsDriversRecord.class;
    }

    /**
     * The column <code>public.results_drivers.result_id</code>.
     */
    public final TableField<ResultsDriversRecord, Long> RESULT_ID = createField(DSL.name("result_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.results_drivers.driver_id</code>.
     */
    public final TableField<ResultsDriversRecord, Long> DRIVER_ID = createField(DSL.name("driver_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.results_drivers.driver_order</code>.
     */
    public final TableField<ResultsDriversRecord, Integer> DRIVER_ORDER = createField(DSL.name("driver_order"), SQLDataType.INTEGER, this, "");

    private ResultsDrivers(Name alias, Table<ResultsDriversRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ResultsDrivers(Name alias, Table<ResultsDriversRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.results_drivers</code> table reference
     */
    public ResultsDrivers(String alias) {
        this(DSL.name(alias), RESULTS_DRIVERS);
    }

    /**
     * Create an aliased <code>public.results_drivers</code> table reference
     */
    public ResultsDrivers(Name alias) {
        this(alias, RESULTS_DRIVERS);
    }

    /**
     * Create a <code>public.results_drivers</code> table reference
     */
    public ResultsDrivers() {
        this(DSL.name("results_drivers"), null);
    }

    public <O extends Record> ResultsDrivers(Table<O> path, ForeignKey<O, ResultsDriversRecord> childPath, InverseForeignKey<O, ResultsDriversRecord> parentPath) {
        super(path, childPath, parentPath, RESULTS_DRIVERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ResultsDriversPath extends ResultsDrivers implements Path<ResultsDriversRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ResultsDriversPath(Table<O> path, ForeignKey<O, ResultsDriversRecord> childPath, InverseForeignKey<O, ResultsDriversRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ResultsDriversPath(Name alias, Table<ResultsDriversRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ResultsDriversPath as(String alias) {
            return new ResultsDriversPath(DSL.name(alias), this);
        }

        @Override
        public ResultsDriversPath as(Name alias) {
            return new ResultsDriversPath(alias, this);
        }

        @Override
        public ResultsDriversPath as(Table<?> alias) {
            return new ResultsDriversPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ResultsDriversRecord> getPrimaryKey() {
        return Keys.RESULTS_DRIVERS_PKEY;
    }

    @Override
    public List<ForeignKey<ResultsDriversRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RESULTS_DRIVERS__RESULTS_DRIVERS_DRIVER_ID_FKEY, Keys.RESULTS_DRIVERS__RESULTS_DRIVERS_RESULT_ID_FKEY);
    }

    private transient DriversPath _drivers;

    /**
     * Get the implicit join path to the <code>public.drivers</code> table.
     */
    public DriversPath drivers() {
        if (_drivers == null)
            _drivers = new DriversPath(this, Keys.RESULTS_DRIVERS__RESULTS_DRIVERS_DRIVER_ID_FKEY, null);

        return _drivers;
    }

    private transient ResultsPath _results;

    /**
     * Get the implicit join path to the <code>public.results</code> table.
     */
    public ResultsPath results() {
        if (_results == null)
            _results = new ResultsPath(this, Keys.RESULTS_DRIVERS__RESULTS_DRIVERS_RESULT_ID_FKEY, null);

        return _results;
    }

    @Override
    public ResultsDrivers as(String alias) {
        return new ResultsDrivers(DSL.name(alias), this);
    }

    @Override
    public ResultsDrivers as(Name alias) {
        return new ResultsDrivers(alias, this);
    }

    @Override
    public ResultsDrivers as(Table<?> alias) {
        return new ResultsDrivers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResultsDrivers rename(String name) {
        return new ResultsDrivers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResultsDrivers rename(Name name) {
        return new ResultsDrivers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResultsDrivers rename(Table<?> name) {
        return new ResultsDrivers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResultsDrivers where(Condition condition) {
        return new ResultsDrivers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResultsDrivers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResultsDrivers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResultsDrivers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ResultsDrivers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ResultsDrivers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ResultsDrivers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ResultsDrivers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResultsDrivers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResultsDrivers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
