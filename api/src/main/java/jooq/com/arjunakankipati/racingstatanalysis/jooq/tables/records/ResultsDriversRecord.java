/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables.records;


import com.arjunakankipati.racingstatanalysis.jooq.tables.ResultsDrivers;
import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ResultsDriversRecord extends UpdatableRecordImpl<ResultsDriversRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.results_drivers.result_id</code>.
     */
    public void setResultId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.results_drivers.result_id</code>.
     */
    public Long getResultId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.results_drivers.driver_id</code>.
     */
    public void setDriverId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.results_drivers.driver_id</code>.
     */
    public Long getDriverId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.results_drivers.driver_order</code>.
     */
    public void setDriverOrder(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.results_drivers.driver_order</code>.
     */
    public Integer getDriverOrder() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ResultsDriversRecord
     */
    public ResultsDriversRecord() {
        super(ResultsDrivers.RESULTS_DRIVERS);
    }

    /**
     * Create a detached, initialised ResultsDriversRecord
     */
    public ResultsDriversRecord(Long resultId, Long driverId, Integer driverOrder) {
        super(ResultsDrivers.RESULTS_DRIVERS);

        setResultId(resultId);
        setDriverId(driverId);
        setDriverOrder(driverOrder);
        resetChangedOnNotNull();
    }
}
