/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Indexes;
import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.CarEntries.CarEntriesPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Drivers.DriversPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.ResultsDrivers.ResultsDriversPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Sessions.SessionsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.ResultsRecord;
import org.jooq.*;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Results extends TableImpl<ResultsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.results</code>
     */
    public static final Results RESULTS = new Results();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResultsRecord> getRecordType() {
        return ResultsRecord.class;
    }

    /**
     * The column <code>public.results.id</code>.
     */
    public final TableField<ResultsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.results.session_id</code>.
     */
    public final TableField<ResultsRecord, Long> SESSION_ID = createField(DSL.name("session_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.results.car_entry_id</code>.
     */
    public final TableField<ResultsRecord, Long> CAR_ENTRY_ID = createField(DSL.name("car_entry_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.results.car_number</code>.
     */
    public final TableField<ResultsRecord, String> CAR_NUMBER = createField(DSL.name("car_number"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.results.tires</code>.
     */
    public final TableField<ResultsRecord, String> TIRES = createField(DSL.name("tires"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.results.status</code>.
     */
    public final TableField<ResultsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.results.laps</code>.
     */
    public final TableField<ResultsRecord, Integer> LAPS = createField(DSL.name("laps"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.results.total_time</code>.
     */
    public final TableField<ResultsRecord, String> TOTAL_TIME = createField(DSL.name("total_time"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.results.gap_first</code>.
     */
    public final TableField<ResultsRecord, String> GAP_FIRST = createField(DSL.name("gap_first"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.results.gap_previous</code>.
     */
    public final TableField<ResultsRecord, String> GAP_PREVIOUS = createField(DSL.name("gap_previous"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.results.fl_lapnum</code>.
     */
    public final TableField<ResultsRecord, Integer> FL_LAPNUM = createField(DSL.name("fl_lapnum"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.results.fl_time</code>.
     */
    public final TableField<ResultsRecord, String> FL_TIME = createField(DSL.name("fl_time"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.results.fl_kph</code>.
     */
    public final TableField<ResultsRecord, BigDecimal> FL_KPH = createField(DSL.name("fl_kph"), SQLDataType.NUMERIC(6, 2), this, "");

    /**
     * The column <code>public.results.position</code>.
     */
    public final TableField<ResultsRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER, this, "");

    private Results(Name alias, Table<ResultsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Results(Name alias, Table<ResultsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.results</code> table reference
     */
    public Results(String alias) {
        this(DSL.name(alias), RESULTS);
    }

    /**
     * Create an aliased <code>public.results</code> table reference
     */
    public Results(Name alias) {
        this(alias, RESULTS);
    }

    /**
     * Create a <code>public.results</code> table reference
     */
    public Results() {
        this(DSL.name("results"), null);
    }

    public <O extends Record> Results(Table<O> path, ForeignKey<O, ResultsRecord> childPath, InverseForeignKey<O, ResultsRecord> parentPath) {
        super(path, childPath, parentPath, RESULTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ResultsPath extends Results implements Path<ResultsRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> ResultsPath(Table<O> path, ForeignKey<O, ResultsRecord> childPath, InverseForeignKey<O, ResultsRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private ResultsPath(Name alias, Table<ResultsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ResultsPath as(String alias) {
            return new ResultsPath(DSL.name(alias), this);
        }

        @Override
        public ResultsPath as(Name alias) {
            return new ResultsPath(alias, this);
        }

        @Override
        public ResultsPath as(Table<?> alias) {
            return new ResultsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_RESULTS_SESSION_ID);
    }

    @Override
    public Identity<ResultsRecord, Long> getIdentity() {
        return (Identity<ResultsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ResultsRecord> getPrimaryKey() {
        return Keys.RESULTS_PKEY;
    }

    @Override
    public List<ForeignKey<ResultsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RESULTS__RESULTS_CAR_ENTRY_ID_FKEY, Keys.RESULTS__RESULTS_SESSION_ID_FKEY);
    }

    private transient CarEntriesPath _carEntries;

    /**
     * Get the implicit join path to the <code>public.car_entries</code> table.
     */
    public CarEntriesPath carEntries() {
        if (_carEntries == null)
            _carEntries = new CarEntriesPath(this, Keys.RESULTS__RESULTS_CAR_ENTRY_ID_FKEY, null);

        return _carEntries;
    }

    private transient SessionsPath _sessions;

    /**
     * Get the implicit join path to the <code>public.sessions</code> table.
     */
    public SessionsPath sessions() {
        if (_sessions == null)
            _sessions = new SessionsPath(this, Keys.RESULTS__RESULTS_SESSION_ID_FKEY, null);

        return _sessions;
    }

    private transient ResultsDriversPath _resultsDrivers;

    /**
     * Get the implicit to-many join path to the
     * <code>public.results_drivers</code> table
     */
    public ResultsDriversPath resultsDrivers() {
        if (_resultsDrivers == null)
            _resultsDrivers = new ResultsDriversPath(this, null, Keys.RESULTS_DRIVERS__RESULTS_DRIVERS_RESULT_ID_FKEY.getInverseKey());

        return _resultsDrivers;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.drivers</code> table
     */
    public DriversPath drivers() {
        return resultsDrivers().drivers();
    }

    @Override
    public Results as(String alias) {
        return new Results(DSL.name(alias), this);
    }

    @Override
    public Results as(Name alias) {
        return new Results(alias, this);
    }

    @Override
    public Results as(Table<?> alias) {
        return new Results(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Results rename(String name) {
        return new Results(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Results rename(Name name) {
        return new Results(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Results rename(Table<?> name) {
        return new Results(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Results where(Condition condition) {
        return new Results(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Results where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Results where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Results where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Results where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Results where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Results where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Results where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Results whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Results whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
