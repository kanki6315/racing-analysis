/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Indexes;
import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Sessions.SessionsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.ImportJobsRecord;
import org.jooq.*;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ImportJobs extends TableImpl<ImportJobsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.import_jobs</code>
     */
    public static final ImportJobs IMPORT_JOBS = new ImportJobs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImportJobsRecord> getRecordType() {
        return ImportJobsRecord.class;
    }

    /**
     * The column <code>public.import_jobs.id</code>.
     */
    public final TableField<ImportJobsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.import_jobs.status</code>.
     */
    public final TableField<ImportJobsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.import_jobs.created_at</code>.
     */
    public final TableField<ImportJobsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.import_jobs.updated_at</code>.
     */
    public final TableField<ImportJobsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.import_jobs.started_at</code>.
     */
    public final TableField<ImportJobsRecord, LocalDateTime> STARTED_AT = createField(DSL.name("started_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.import_jobs.ended_at</code>.
     */
    public final TableField<ImportJobsRecord, LocalDateTime> ENDED_AT = createField(DSL.name("ended_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.import_jobs.error</code>.
     */
    public final TableField<ImportJobsRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.import_jobs.url</code>.
     */
    public final TableField<ImportJobsRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.import_jobs.import_type</code>.
     */
    public final TableField<ImportJobsRecord, String> IMPORT_TYPE = createField(DSL.name("import_type"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.import_jobs.process_type</code>.
     */
    public final TableField<ImportJobsRecord, String> PROCESS_TYPE = createField(DSL.name("process_type"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>public.import_jobs.session_id</code>.
     */
    public final TableField<ImportJobsRecord, Long> SESSION_ID = createField(DSL.name("session_id"), SQLDataType.BIGINT, this, "");

    private ImportJobs(Name alias, Table<ImportJobsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ImportJobs(Name alias, Table<ImportJobsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.import_jobs</code> table reference
     */
    public ImportJobs(String alias) {
        this(DSL.name(alias), IMPORT_JOBS);
    }

    /**
     * Create an aliased <code>public.import_jobs</code> table reference
     */
    public ImportJobs(Name alias) {
        this(alias, IMPORT_JOBS);
    }

    /**
     * Create a <code>public.import_jobs</code> table reference
     */
    public ImportJobs() {
        this(DSL.name("import_jobs"), null);
    }

    public <O extends Record> ImportJobs(Table<O> path, ForeignKey<O, ImportJobsRecord> childPath, InverseForeignKey<O, ImportJobsRecord> parentPath) {
        super(path, childPath, parentPath, IMPORT_JOBS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ImportJobsPath extends ImportJobs implements Path<ImportJobsRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> ImportJobsPath(Table<O> path, ForeignKey<O, ImportJobsRecord> childPath, InverseForeignKey<O, ImportJobsRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private ImportJobsPath(Name alias, Table<ImportJobsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ImportJobsPath as(String alias) {
            return new ImportJobsPath(DSL.name(alias), this);
        }

        @Override
        public ImportJobsPath as(Name alias) {
            return new ImportJobsPath(alias, this);
        }

        @Override
        public ImportJobsPath as(Table<?> alias) {
            return new ImportJobsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_IMPORT_JOBS_STATUS);
    }

    @Override
    public Identity<ImportJobsRecord, Integer> getIdentity() {
        return (Identity<ImportJobsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ImportJobsRecord> getPrimaryKey() {
        return Keys.IMPORT_JOBS_PKEY;
    }

    @Override
    public List<ForeignKey<ImportJobsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.IMPORT_JOBS__IMPORT_JOBS_SESSION_ID_FKEY);
    }

    private transient SessionsPath _sessions;

    /**
     * Get the implicit join path to the <code>public.sessions</code> table.
     */
    public SessionsPath sessions() {
        if (_sessions == null)
            _sessions = new SessionsPath(this, Keys.IMPORT_JOBS__IMPORT_JOBS_SESSION_ID_FKEY, null);

        return _sessions;
    }

    @Override
    public ImportJobs as(String alias) {
        return new ImportJobs(DSL.name(alias), this);
    }

    @Override
    public ImportJobs as(Name alias) {
        return new ImportJobs(alias, this);
    }

    @Override
    public ImportJobs as(Table<?> alias) {
        return new ImportJobs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImportJobs rename(String name) {
        return new ImportJobs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImportJobs rename(Name name) {
        return new ImportJobs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImportJobs rename(Table<?> name) {
        return new ImportJobs(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImportJobs where(Condition condition) {
        return new ImportJobs(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImportJobs where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImportJobs where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImportJobs where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImportJobs where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImportJobs where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImportJobs where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ImportJobs where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImportJobs whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ImportJobs whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
