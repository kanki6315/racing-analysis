/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.CarDrivers.CarDriversPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Laps.LapsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Results.ResultsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.ResultsDrivers.ResultsDriversPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.DriversRecord;
import org.jooq.*;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Drivers extends TableImpl<DriversRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.drivers</code>
     */
    public static final Drivers DRIVERS = new Drivers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DriversRecord> getRecordType() {
        return DriversRecord.class;
    }

    /**
     * The column <code>public.drivers.id</code>.
     */
    public final TableField<DriversRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.drivers.first_name</code>.
     */
    public final TableField<DriversRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.drivers.last_name</code>.
     */
    public final TableField<DriversRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.drivers.nationality</code>.
     */
    public final TableField<DriversRecord, String> NATIONALITY = createField(DSL.name("nationality"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.drivers.hometown</code>.
     */
    public final TableField<DriversRecord, String> HOMETOWN = createField(DSL.name("hometown"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.drivers.license_type</code>.
     */
    public final TableField<DriversRecord, String> LICENSE_TYPE = createField(DSL.name("license_type"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.drivers.external_id</code>.
     */
    public final TableField<DriversRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.VARCHAR(100), this, "");

    private Drivers(Name alias, Table<DriversRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Drivers(Name alias, Table<DriversRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.drivers</code> table reference
     */
    public Drivers(String alias) {
        this(DSL.name(alias), DRIVERS);
    }

    /**
     * Create an aliased <code>public.drivers</code> table reference
     */
    public Drivers(Name alias) {
        this(alias, DRIVERS);
    }

    /**
     * Create a <code>public.drivers</code> table reference
     */
    public Drivers() {
        this(DSL.name("drivers"), null);
    }

    public <O extends Record> Drivers(Table<O> path, ForeignKey<O, DriversRecord> childPath, InverseForeignKey<O, DriversRecord> parentPath) {
        super(path, childPath, parentPath, DRIVERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DriversPath extends Drivers implements Path<DriversRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DriversPath(Table<O> path, ForeignKey<O, DriversRecord> childPath, InverseForeignKey<O, DriversRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DriversPath(Name alias, Table<DriversRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DriversPath as(String alias) {
            return new DriversPath(DSL.name(alias), this);
        }

        @Override
        public DriversPath as(Name alias) {
            return new DriversPath(alias, this);
        }

        @Override
        public DriversPath as(Table<?> alias) {
            return new DriversPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DriversRecord, Long> getIdentity() {
        return (Identity<DriversRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DriversRecord> getPrimaryKey() {
        return Keys.DRIVERS_PKEY;
    }

    private transient CarDriversPath _carDrivers;

    /**
     * Get the implicit to-many join path to the <code>public.car_drivers</code>
     * table
     */
    public CarDriversPath carDrivers() {
        if (_carDrivers == null)
            _carDrivers = new CarDriversPath(this, null, Keys.CAR_DRIVERS__CAR_DRIVERS_DRIVER_ID_FKEY.getInverseKey());

        return _carDrivers;
    }

    private transient LapsPath _laps;

    /**
     * Get the implicit to-many join path to the <code>public.laps</code> table
     */
    public LapsPath laps() {
        if (_laps == null)
            _laps = new LapsPath(this, null, Keys.LAPS__LAPS_DRIVER_ID_FKEY.getInverseKey());

        return _laps;
    }

    private transient ResultsDriversPath _resultsDrivers;

    /**
     * Get the implicit to-many join path to the
     * <code>public.results_drivers</code> table
     */
    public ResultsDriversPath resultsDrivers() {
        if (_resultsDrivers == null)
            _resultsDrivers = new ResultsDriversPath(this, null, Keys.RESULTS_DRIVERS__RESULTS_DRIVERS_DRIVER_ID_FKEY.getInverseKey());

        return _resultsDrivers;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.results</code> table
     */
    public ResultsPath results() {
        return resultsDrivers().results();
    }

    @Override
    public Drivers as(String alias) {
        return new Drivers(DSL.name(alias), this);
    }

    @Override
    public Drivers as(Name alias) {
        return new Drivers(alias, this);
    }

    @Override
    public Drivers as(Table<?> alias) {
        return new Drivers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Drivers rename(String name) {
        return new Drivers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Drivers rename(Name name) {
        return new Drivers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Drivers rename(Table<?> name) {
        return new Drivers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Drivers where(Condition condition) {
        return new Drivers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Drivers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Drivers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Drivers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Drivers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Drivers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Drivers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Drivers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Drivers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Drivers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
