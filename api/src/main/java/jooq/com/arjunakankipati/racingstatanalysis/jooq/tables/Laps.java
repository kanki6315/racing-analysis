/*
 * This file is generated by jOOQ.
 */
package com.arjunakankipati.racingstatanalysis.jooq.tables;


import com.arjunakankipati.racingstatanalysis.jooq.Keys;
import com.arjunakankipati.racingstatanalysis.jooq.Public;
import com.arjunakankipati.racingstatanalysis.jooq.tables.CarEntries.CarEntriesPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Drivers.DriversPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.Sectors.SectorsPath;
import com.arjunakankipati.racingstatanalysis.jooq.tables.records.LapsRecord;
import org.jooq.*;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Laps extends TableImpl<LapsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.laps</code>
     */
    public static final Laps LAPS = new Laps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LapsRecord> getRecordType() {
        return LapsRecord.class;
    }

    /**
     * The column <code>public.laps.id</code>.
     */
    public final TableField<LapsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.laps.driver_id</code>.
     */
    public final TableField<LapsRecord, Long> DRIVER_ID = createField(DSL.name("driver_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.laps.lap_number</code>.
     */
    public final TableField<LapsRecord, Integer> LAP_NUMBER = createField(DSL.name("lap_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.laps.lap_time_seconds</code>.
     */
    public final TableField<LapsRecord, BigDecimal> LAP_TIME_SECONDS = createField(DSL.name("lap_time_seconds"), SQLDataType.NUMERIC(10, 3).nullable(false), this, "");

    /**
     * The column <code>public.laps.session_elapsed_seconds</code>.
     */
    public final TableField<LapsRecord, BigDecimal> SESSION_ELAPSED_SECONDS = createField(DSL.name("session_elapsed_seconds"), SQLDataType.NUMERIC(12, 3).nullable(false), this, "");

    /**
     * The column <code>public.laps.timestamp</code>.
     */
    public final TableField<LapsRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.laps.average_speed_kph</code>.
     */
    public final TableField<LapsRecord, BigDecimal> AVERAGE_SPEED_KPH = createField(DSL.name("average_speed_kph"), SQLDataType.NUMERIC(7, 3), this, "");

    /**
     * The column <code>public.laps.car_id</code>.
     */
    public final TableField<LapsRecord, Long> CAR_ID = createField(DSL.name("car_id"), SQLDataType.BIGINT, this, "");

    private Laps(Name alias, Table<LapsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Laps(Name alias, Table<LapsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.laps</code> table reference
     */
    public Laps(String alias) {
        this(DSL.name(alias), LAPS);
    }

    /**
     * Create an aliased <code>public.laps</code> table reference
     */
    public Laps(Name alias) {
        this(alias, LAPS);
    }

    /**
     * Create a <code>public.laps</code> table reference
     */
    public Laps() {
        this(DSL.name("laps"), null);
    }

    public <O extends Record> Laps(Table<O> path, ForeignKey<O, LapsRecord> childPath, InverseForeignKey<O, LapsRecord> parentPath) {
        super(path, childPath, parentPath, LAPS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LapsPath extends Laps implements Path<LapsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LapsPath(Table<O> path, ForeignKey<O, LapsRecord> childPath, InverseForeignKey<O, LapsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LapsPath(Name alias, Table<LapsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LapsPath as(String alias) {
            return new LapsPath(DSL.name(alias), this);
        }

        @Override
        public LapsPath as(Name alias) {
            return new LapsPath(alias, this);
        }

        @Override
        public LapsPath as(Table<?> alias) {
            return new LapsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<LapsRecord, Long> getIdentity() {
        return (Identity<LapsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LapsRecord> getPrimaryKey() {
        return Keys.LAPS_PKEY;
    }

    @Override
    public List<ForeignKey<LapsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LAPS__LAPS_CAR_ENTRY_ID_FKEY, Keys.LAPS__LAPS_CAR_ID_FKEY, Keys.LAPS__LAPS_DRIVER_ID_FKEY);
    }

    private transient CarEntriesPath _lapsCarEntryIdFkey;

    /**
     * Get the implicit join path to the <code>public.car_entries</code> table,
     * via the <code>laps_car_entry_id_fkey</code> key.
     */
    public CarEntriesPath lapsCarEntryIdFkey() {
        if (_lapsCarEntryIdFkey == null)
            _lapsCarEntryIdFkey = new CarEntriesPath(this, Keys.LAPS__LAPS_CAR_ENTRY_ID_FKEY, null);

        return _lapsCarEntryIdFkey;
    }

    private transient CarEntriesPath _lapsCarIdFkey;

    /**
     * Get the implicit join path to the <code>public.car_entries</code> table,
     * via the <code>laps_car_id_fkey</code> key.
     */
    public CarEntriesPath lapsCarIdFkey() {
        if (_lapsCarIdFkey == null)
            _lapsCarIdFkey = new CarEntriesPath(this, Keys.LAPS__LAPS_CAR_ID_FKEY, null);

        return _lapsCarIdFkey;
    }

    private transient DriversPath _drivers;

    /**
     * Get the implicit join path to the <code>public.drivers</code> table.
     */
    public DriversPath drivers() {
        if (_drivers == null)
            _drivers = new DriversPath(this, Keys.LAPS__LAPS_DRIVER_ID_FKEY, null);

        return _drivers;
    }

    private transient SectorsPath _sectors;

    /**
     * Get the implicit to-many join path to the <code>public.sectors</code>
     * table
     */
    public SectorsPath sectors() {
        if (_sectors == null)
            _sectors = new SectorsPath(this, null, Keys.SECTORS__SECTORS_LAP_ID_FKEY.getInverseKey());

        return _sectors;
    }

    @Override
    public Laps as(String alias) {
        return new Laps(DSL.name(alias), this);
    }

    @Override
    public Laps as(Name alias) {
        return new Laps(alias, this);
    }

    @Override
    public Laps as(Table<?> alias) {
        return new Laps(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Laps rename(String name) {
        return new Laps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Laps rename(Name name) {
        return new Laps(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Laps rename(Table<?> name) {
        return new Laps(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Laps where(Condition condition) {
        return new Laps(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Laps where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Laps where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Laps where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Laps where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Laps where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Laps where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Laps where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Laps whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Laps whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
